from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *

TELEGRAM_CHATBOT_TOKEN = "7776004057:AAHsozoY2O4LKQXQ3e9lS78TrnhvJfdzgLg"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = load_message('main')
    await send_photo(update, context, 'main')
    await send_text(update, context, msg)
    await show_main_menu(update, context, {
        "start": "–≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è Tinder-–ø—Ä–æ—Ñ—ñ–ª—é üòé",
        "opener": "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –≤–∞—à–æ–≥–æ —ñ–º–µ–Ω—ñ üòà",
        "date": "–ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–∫–∞–º–∏ üî•",
        "gpt": "–ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —á–∞—Ç—É GPT üß†",
    })


async def answer_to_user_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'date':
        await date_dialog(update, context)
    elif dialog.mode == 'message':
        await message_dialog(update, context)
    elif dialog.mode == 'profile':
        await profile_dialog(update, context)
    elif dialog.mode == 'opener':
        await opener_dialog(update, context)
    else:
        await send_text(update, context, "–í–∏–±–∞—á, —è –ø–æ–∫–∏ –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è!")


async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    await send_photo(update, context, 'gpt')
    msg = load_message('gpt')
    await send_text(update, context, msg)


async def gpt_dialog(update: Update, context):
    question = update.message.text
    prompt = load_prompt('gpt')
    answer = await chat_gpt.send_question(prompt, question)
    await send_text(update, context, answer)


async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'date'
    await send_photo(update, context, 'date')
    msg = load_message('date')
    await send_text_buttons(update, context, msg, {
        'date_grande': '–ê—Ä—ñ–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ',
        'date_robbie': '–ú–∞—Ä–≥–æ –†–æ–±–±—ñ',
        'date_zendaya': '–ó–µ–Ω–¥–µ—è',
        'date_gosling': '–†–∞–π–∞–Ω –ì–æ—Å–ª—ñ–Ω–≥',
        'date_hardy': '–¢–æ–º –•–∞—Ä–¥—ñ',
    })


async def date_buttons(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()
    await send_photo(update, context, query)
    await send_text(update, context, '–ì–∞—Ä–Ω–∏–π –≤–∏–±—ñ—Ä! –í–ø–µ—Ä–µ–¥! –ó–∞–ø—Ä–æ—Å–∏ —Ü—é –ª—é–¥–∏–Ω—É –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è!')
    prompt = load_prompt(query)
    chat_gpt.set_prompt(prompt)


async def date_dialog(update, context):
    text = update.message.text
    msg = await send_text(update, context, '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–±–∏—Ä–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...')
    answer = await chat_gpt.add_message(text)
    await msg.edit_text(answer)


async def message(update, context):
    dialog.mode = 'message'
    msg = load_message('message')
    await send_photo(update, context, 'message')
    await send_text_buttons(update, context, msg, {
        "message_next": '–ü—Ä–∏–¥—É–º–∞–π –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
        "message_date": '–ù–∞–ø–∏—à–∏ —è–∫ –∫–ª–∞—Å–Ω–æ –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –Ω–∞ –ø–æ–±–∞—á–µ–Ω–Ω—è',
    })

    dialog.list.clear()


async def message_dialog(update, context):
    text = update.message.text
    dialog.list.append(text)


async def message_buttons(update, context):
    query = update.callback_query.data
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)

    msg = await send_text(update, context, '–î—É–º–∞—é –Ω–∞–¥ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏...')
    answer = await chat_gpt.send_question(prompt, user_chat_history)
    await msg.edit_text(answer)


async def profile(update, context):
    dialog.mode = 'profile'
    msg = load_message('profile')
    await send_photo(update, context, 'profile')
    await send_text(update, context, msg)

    dialog.counter = 0
    dialog.user.clear()
    await send_text(update, context, '–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏ —ñ —Å–∫—ñ–ª—å–∫–∏ –í–∞–º —Ä–æ–∫—ñ–≤?')


async def profile_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user['name'] = text
        await send_text(update, context, "–ö–∏–º –≤–∏ –ø—Ä–∞—Ü—é—î—Ç–µ?")
    if dialog.counter == 2:
        dialog.user['occupation'] = text
        await send_text(update, context, "–£ –≤–∞—Å —î —Ö–æ–±—ñ?")
    if dialog.counter == 3:
        dialog.user['hobby'] = text
        await send_text(update, context, "–©–æ –≤–∞–º –ù–ï –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –≤ –ª—é–¥—è—Ö?")
    if dialog.counter == 4:
        dialog.user['annoys'] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    if dialog.counter == 5:
        dialog.user['goals'] = text

        prompt = load_prompt('profile')
        user_info = dialog_user_info_to_str(dialog.user)
        message = await send_text(update, context, "–ú–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ –≤–∞—à –ø—Ä–æ—Ñ—ñ–ª—å. –ó–∞—á–µ–∫–∞–π—Ç–µ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")

        answer = await chat_gpt.send_question(prompt, user_info)
        await message.edit_text(answer)
        dialog.mode = None


async def opener(update, context):
    dialog.mode = 'opener'
    msg = load_message('opener')
    await send_photo(update, context, 'opener')
    await send_text(update, context, msg)

    dialog.counter = 0
    dialog.user.clear()
    await send_text(update, context, '–Ø–∫–µ —ñ–º—è –¥—ñ–≤—á–∏–Ω–∏?')


async def opener_dialog(update, context):
    text = update.message.text
    dialog.counter += 1

    if dialog.counter == 1:
        dialog.user['name'] = text
        await send_text(update, context, "–°–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä—É?")
    if dialog.counter == 2:
        dialog.user['age'] = text
        await send_text(update, context, "–û—Ü—ñ–Ω—ñ—Ç—å –∑–æ–≤–Ω—ñ—à–Ω—ñ—Å—Ç—å –≤ 1 –¥–æ 10?")
    if dialog.counter == 3:
        dialog.user['handsome'] = text
        await send_text(update, context, "–ö–∏–º –≤–æ–Ω–∞ –ø—Ä–∞—Ü—é—î?")
    if dialog.counter == 4:
        dialog.user['occupation'] = text
        await send_text(update, context, "–ú–µ—Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞?")
    if dialog.counter == 5:
        dialog.user['goals'] = text

        prompt = load_prompt('opener')
        user_info = dialog_user_info_to_str(dialog.user)
        message = await send_text(update, context, "–ú–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

        answer = await chat_gpt.send_question(prompt, user_info)
        await message.edit_text(answer)
        dialog.mode = None


dialog = Dialog()
dialog.mode = None
dialog.list = []
dialog.user = {}
dialog.counter = 0

CHAT_GPT_TOKEN = "gpt:AU54YW8RRi4TXANWp060hfjiJxU6btLIvPmqxAgYF0QLgPDwmNfdLT5NyC9Y8r_u4QZeQmwhzFJFkblB3T4yhgCdA9W2KZIQwDchnwN-SRJKHph3pqraKQNsAmcDeSXdm_4aNY-8_3oiLFalGXckzNJlfA-T"

chat_gpt = ChatGptService(CHAT_GPT_TOKEN)

app = ApplicationBuilder().token(TELEGRAM_CHATBOT_TOKEN).build()
app.add_handler(CommandHandler('start', start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, answer_to_user_text))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('date', date))
app.add_handler(CommandHandler('message', message))
app.add_handler(CommandHandler('profile', profile))
app.add_handler(CommandHandler('opener', opener))
app.add_handler(CallbackQueryHandler(date_buttons, pattern="date_.*"))
app.add_handler(CallbackQueryHandler(message_buttons, pattern="message_.*"))
app.run_polling()
